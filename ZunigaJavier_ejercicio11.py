{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.         -0.35386176  0.98787067 ... -1.14300724 -0.51140111\n",
      "  -0.20206128]\n",
      " [ 0.         -0.35386176 -0.46845087 ... -0.97608245 -0.51140111\n",
      "  -0.20206128]\n",
      " [ 0.          4.05958078  1.61200847 ...  0.19239104 -0.03277871\n",
      "  -0.20206128]\n",
      " ...\n",
      " [ 0.         -0.35386176  1.40396254 ... -0.80915767 -0.51140111\n",
      "  -0.20206128]\n",
      " [ 0.         -0.35386176 -1.09258867 ...  0.86009017 -0.51140111\n",
      "  -0.20206128]\n",
      " [ 0.          0.74949887  1.19591661 ... -1.14300724 -0.51140111\n",
      "  -0.20206128]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.15615227 -1.27472468  1.42909167 ...  0.60499752  3.96983752\n",
      "  3.9020478 ]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#### import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.linear_model import LogisticRegression  \n",
    "from sklearn.metrics import confusion_matrix\n",
    "from matplotlib.colors import ListedColormap \n",
    "from sklearn.model_selection import train_test_split\n",
    "import sklearn.datasets as skdata\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "url = \"https://github.com/ComputoCienciasUniandes/IntroDataScience/blob/master/ejercicios/10/digitos_primera_parte.ipynb\"\n",
    "# load dataset into Pandas DataFrame\n",
    "numeros = skdata.load_digits()\n",
    "target = numeros['target']\n",
    "imagenes = numeros['images']\n",
    "n_imagenes = len(target)\n",
    "# para poder correr PCA debemos \"aplanar las imagenes\"\n",
    "data = imagenes.reshape((n_imagenes, -1)) # para volver a tener los datos como imagen basta hacer data.reshape((n_imagenes, 8, 8))\n",
    "\n",
    "# Vamos a hacer un split training test\n",
    "scaler = StandardScaler()\n",
    "x_train, x_test, y_train, y_test = train_test_split(data, target, train_size=0.5)\n",
    "\n",
    "x_train = scaler.fit_transform(x_train)\n",
    "x_test = scaler.transform(x_test)\n",
    "\n",
    "print (x_train)\n",
    "  \n",
    "numcomponetes= 6    \n",
    "pca = PCA(n_components = numcomponetes) \n",
    "\n",
    "\n",
    "\n",
    "X_train = pca.fit_transform(x_train) \n",
    "X_test = pca.transform(x_test) \n",
    "  \n",
    "explained_variance = pca.explained_variance_ratio_ \n",
    "\n",
    "\n",
    "num = np.zeros(len(X_set))\n",
    "for i in range(len(X_set)):\n",
    "    if (i%10==1):\n",
    "        num[i]=1\n",
    "\n",
    "\n",
    "\n",
    "plt.xlim(X1.min(), X1.max()) \n",
    "plt.ylim(X2.min(), X2.max()) \n",
    "  \n",
    "for i, j in enumerate(np.unique(y_set)): \n",
    "    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 2], \n",
    "                c = ListedColormap(('green','red', 'green'))(i), label = j) \n",
    "  \n",
    "plt.title('Logistic Regression (Training set)') \n",
    "plt.xlabel('PC1') # for Xlabel \n",
    "plt.ylabel('PC2') # for Ylabel \n",
    "plt.legend() # to show legend \n",
    "  \n",
    "\n",
    "print (X_set[:,2])\n",
    "\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.15615227 -1.27472468  1.42909167 ...  0.60499752  3.96983752\n",
      "  3.9020478 ]\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
